You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit=0;
        //lets take 1st index as buyprice
        int buyPrice=prices[0];
        for(int i=1;i<prices.length;i++){
            //Check if the next element is lower than buyprice
            //then the buyprice is current element
            if(prices[i] < buyPrice){
                buyPrice = prices[i];
            }
            //if the current price is greater than buyPrice then determine
            //the profit
            else{
                int currProfit = prices[i]-buyPrice;
                //determine the maxprofit
                maxProfit = Math.max(maxProfit,currProfit);
            }
        }
        return maxProfit;
    }
}