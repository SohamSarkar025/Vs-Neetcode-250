You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.

class Solution {
public int characterReplacement(String s, int k) {
//Frequency counting using array size of 26
int[] freq = new int[26];
int maxWindowSize = 0;
int left=0;
int maxFreq = 0;
for(int right=0;right<s.length();right++){
//increase the frequency
freq[s.charAt(right) - 'A']++;
//calculate the maxfreq to determine the character need to be changed
maxFreq = Math.max(maxFreq, freq[s.charAt(right) - 'A']);
//calculate the window length
int windowLength = right-left+1;
//calculate the character need to be changed
int characterNeedtoChange=windowLength-maxFreq;
//if character need to be changed then reduce the window size
if(characterNeedtoChange > k){
freq[s.charAt(left)-'A']--;
left++;
}
//if reducing the window size becomes the max window
//thats why calculate again the windowlength
windowLength = right-left+1;
maxWindowSize = Math.max(maxWindowSize,windowLength);
}
return maxWindowSize;
}
}
