Given an array of strings strs, group the anagrams together. You can return the answer in any order.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:

There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
Example 2:

Input: strs = [""]

Output: [[""]]

Example 3:

Input: strs = ["a"]

Output: [["a"]]

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs == null || strs.length == 0){
            return new ArrayList<>();
        }
        //creating hashmap to store the frequencyString and Strings
        HashMap<String,List<String>> map = new HashMap<>();
        //iterate every string 
        for(String s:strs){
            //creating freq array to store the frequency
            int[] freq = new int[26];
            for(char c:s.toCharArray()){
                freq[c - 'a']++;
            }
            //StringBuilder to store the FrequencyString 
            StringBuilder sb = new StringBuilder();
            int c = 'a';
            for(int i:freq){
                sb.append(c);
                sb.append(i);
                c++;
            }
            String key = sb.toString();
            //if map doesnot have the fequencyString then create a empty list
            if(!map.containsKey(key)){
                map.put(key,new ArrayList<>());
            }
            //if the fequencyString is in the map then add the current string in the map
            map.get(key).add(s);
        }
        //return a list containing the the map.values means the list of grouped anagrams
        return new ArrayList<>(map.values());
    }
}