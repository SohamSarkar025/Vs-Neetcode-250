Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
      //HashMap to store the number with its frequency
      HashMap<Integer,Integer> map = new HashMap<>();
      //Count the frequency of each number
      for(int num : nums){
        map.put(num,map.getOrDefault(num,0)+1);
      }
      //List[Integer] bucket array to store the the number with its frequency and its size is total length +1
      List<Integer>[] bucket = new ArrayList[nums.length+1];
      //take the number from map.keySet() 
      //determine the frequency
      //bucket[frequency] == 0 ,then make new ArrayList<>()
      //otherwise put the number as a list[Integer] in bucket[frequency] position
      for(int num : map.keySet()){
        int frequency = map.get(num);
        if(bucket[frequency] == null){
          bucket[frequency] = new ArrayList<>();
        }
        bucket[frequency].add(num);
      }
      //Intialize the counter 0 to check every time it lower than k 
      int counter=0;
      //initialize a new array of size k as the ans array holds only k number of value
      int[] res = new int[k];
      //iterate from last index as it has highest frequency
      for(int pos=bucket.length-1;pos >= 0 && counter < k ;pos--){
        //if bucket pos not null that means it has list of numbers or may be a single number
        if(bucket[pos] != null){
          //loop through the bucket[pos] the list of Integers 
          for(Integer integer:bucket[pos]){
            //put the first position the first number
            res[counter] = integer;
            //increase the position for next index;
            counter++;
          }
        }
      }
      //return the result array
      return res;
    }
}