Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false


class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        //create hashmap to store the number and its index
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            //put the number if it is not in map
            if(!map.containsKey(nums[i])){
                map.put(nums[i],i);
            }
            //if the number is in the map
            //check the abs of pastIndex and current index
            else{
                int pastIndex = map.get(nums[i]); 
                if(Math.abs(pastIndex - i) <= k){
                    return true;
                }
                //if the abs is greater then put the 
                //repeated number with current index
                //for checking next time.
                map.put(nums[i],i);
            }
        }
        return false;
    }
}