Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int n = nums.length;
        //Creating a list to store the majority element
        List<Integer> res = new ArrayList<>();
        //Creating HashMap to store the frequency
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            //increasing frequency
            map.put(num, map.getOrDefault(num, 0) + 1);
            //check if the frequency is more than n/3
            if (map.get(num) > n / 3) {
                //check if the majority element is already in the list
                if (res.contains(num)) {
                    continue;
                }
                //If not found in the list then add the majority 
                //element 
                res.add(num);
            }
        }
        return res;
    }
}